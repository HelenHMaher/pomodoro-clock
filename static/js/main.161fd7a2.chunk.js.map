{"version":3,"sources":["LengthControl/index.js","TimerFace/index.js","TimerControl/index.js","Sound/index.js","App.js","serviceWorker.js","index.js"],"names":["LengthControl","props","labelID","label","decrementID","incrementID","lengthID","length","handleClick","className","id","onClick","value","TimerFace","timerType","clock","minutes","Math","floor","seconds","toClock","TimerControl","handlePlayPause","handleReset","Sound","src","App","useState","breakLength","setBreakLength","sessionLength","setSessionLength","timerRunning","setRunning","setTimerType","timerTime","setTimerTime","useEffect","startTimer","setInterval","clearInterval","document","getElementById","play","lengthControl","breakSession","sign","currentLength","setFunction","e","currentTarget","sound","pause","currentTime","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.161fd7a2.chunk.js","sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\";\n\nexport const LengthControl = (props) => {\n  const {\n    labelID,\n    label,\n    decrementID,\n    incrementID,\n    lengthID,\n    length,\n    handleClick,\n  } = props;\n  return (\n    <div className=\"length-control\">\n      <div id={labelID}>{label}</div>\n      <div className=\"controls\">\n        <button\n          className=\"control-elements\"\n          id={incrementID}\n          onClick={handleClick}\n          value=\"+\"\n        >\n          &#43;\n        </button>\n        <div className=\"control-elements\" id={lengthID}>\n          {length}\n        </div>\n        <button\n          className=\"control-elements\"\n          id={decrementID}\n          onClick={handleClick}\n          value=\"-\"\n        >\n          &#8722;\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default LengthControl;\n\nLengthControl.propTypes = {\n  labelID: propTypes.string.isRequired,\n  label: propTypes.string.isRequired,\n  decrementID: propTypes.string.isRequired,\n  incrementID: propTypes.string.isRequired,\n  lengthID: propTypes.string.isRequired,\n  length: propTypes.number.isRequired,\n  handleClick: propTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const TimerFace = (props) => {\n  const { timerType, clock } = props;\n\n  const toClock = () => {\n    let minutes = Math.floor(clock / 60);\n    let seconds = clock - minutes * 60;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    return minutes + \":\" + seconds;\n  };\n  return (\n    <div className=\"timer-face\">\n      <div id=\"timer-label\">{timerType}</div>\n      <div id=\"time-left\">{toClock()}</div>\n    </div>\n  );\n};\n\nexport default TimerFace;\n\nTimerFace.propTypes = {\n  timerType: PropTypes.string.isRequired,\n  clock: PropTypes.number.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const TimerControl = (props) => {\n  const { handlePlayPause, handleReset } = props;\n  return (\n    <div className=\"timer-control\">\n      <button id=\"start_stop\" onClick={handlePlayPause}>\n        Play/Pause\n      </button>\n      <button id=\"reset\" onClick={handleReset}>\n        Reset\n      </button>\n    </div>\n  );\n};\n\nexport default TimerControl;\n\nTimerControl.propTypes = {\n  handlePlayPause: PropTypes.func.isRequired,\n  handleReset: PropTypes.func.isRequired,\n};\n","import React from \"react\";\n\nexport const Sound = () => {\n  return (\n    <audio\n      id=\"beep\"\n      src=\"https://sampleswap.org/samples-ghost/INSTRUMENTS%20(SINGLE%20SAMPLES)/Flutes/335[kb]flute-jazzriff1.aif.mp3\"\n      className=\"sound\"\n    ></audio>\n  );\n};\n\nexport default Sound;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport LengthControl from \"./LengthControl\";\nimport TimerFace from \"./TimerFace\";\nimport TimerControl from \"./TimerControl\";\nimport Sound from \"./Sound\";\n\nexport const App = () => {\n  const [breakLength, setBreakLength] = useState(5);\n  const [sessionLength, setSessionLength] = useState(25);\n  const [timerRunning, setRunning] = useState(false);\n  const [timerType, setTimerType] = useState(\"Session\");\n  const [timerTime, setTimerTime] = useState(1500);\n\n  useEffect(() => {\n    let startTimer = null;\n    if (timerRunning && timerTime > 0) {\n      startTimer = setInterval(() => {\n        setTimerTime((timerTime) => timerTime - 1);\n      }, 1000);\n    }\n    if (timerTime <= 0) {\n      if (timerType === \"Session\") {\n        setTimerType(\"Break\");\n        setTimerTime(breakLength * 60);\n      } else if (timerType === \"Break\") {\n        setTimerType(\"Session\");\n        setTimerTime(sessionLength * 60);\n      }\n    } else if (!timerRunning) {\n      clearInterval(startTimer);\n    }\n    return () => clearInterval(startTimer);\n  }, [timerRunning, timerTime, timerType, breakLength, sessionLength]);\n\n  useEffect(() => {\n    if (timerTime === 0) {\n      const sound = document.getElementById(\"beep\");\n      sound.play();\n    }\n  }, [timerTime]);\n\n  const breakLengthControl = (e) =>\n    lengthControl(\"Break\", e.currentTarget.value, breakLength, setBreakLength);\n\n  const sessionLengthControl = (e) =>\n    lengthControl(\n      \"Session\",\n      e.currentTarget.value,\n      sessionLength,\n      setSessionLength\n    );\n\n  const lengthControl = (breakSession, sign, currentLength, setFunction) => {\n    if (timerRunning === false && timerType !== breakSession) {\n      if (sign === \"-\" && currentLength > 1) {\n        setFunction(currentLength - 1);\n      } else if (sign === \"+\" && currentLength < 60) {\n        setFunction(currentLength + 1);\n      }\n    } else if (timerRunning === false && timerType === breakSession) {\n      if (sign === \"-\" && currentLength > 1) {\n        setFunction(currentLength - 1);\n        setTimerTime(timerTime - 60);\n      } else if (sign === \"+\" && currentLength < 60) {\n        setFunction(currentLength + 1);\n        setTimerTime(timerTime + 60);\n      }\n    } else {\n      return;\n    }\n  };\n\n  const handleReset = () => {\n    const sound = document.getElementById(\"beep\");\n    setBreakLength(5);\n    setSessionLength(25);\n    setRunning(false);\n    setTimerTime(1500);\n    setTimerType(\"Session\");\n    sound.pause();\n    sound.currentTime = 0;\n  };\n\n  const toggle = () => {\n    setRunning(!timerRunning);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>Pomodoro Clock</p>\n      </header>\n      <div className=\"clock-wrapper\">\n        <LengthControl\n          labelID=\"session-label\"\n          label=\"Session Length\"\n          decrementID=\"session-decrement\"\n          incrementID=\"session-increment\"\n          lengthID=\"session-length\"\n          length={sessionLength}\n          handleClick={sessionLengthControl}\n        />\n        <LengthControl\n          labelID=\"break-label\"\n          label=\"Break Length\"\n          decrementID=\"break-decrement\"\n          incrementID=\"break-increment\"\n          lengthID=\"break-length\"\n          length={breakLength}\n          handleClick={breakLengthControl}\n        />\n        <TimerFace timerType={timerType} clock={timerTime} />\n        <TimerControl handlePlayPause={toggle} handleReset={handleReset} />\n        <Sound />\n      </div>\n      <footer className=\"App-footer\">\n        <p>Helen Maher 2020</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}